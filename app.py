import datetime
import telebot
import re
import random
import schedule
import threading
import json
import time
from glob import glob
from settings import api
from apscheduler.schedulers.blocking import BlockingScheduler

bot = telebot.TeleBot(api)

compliments = []
with open('text_files/compliments.txt', 'r', encoding='utf-8') as f:
    for x in f:
        compliments.append(x[:-2])

wishes_morning = []
with open('text_files/wishes.txt', 'r', encoding='utf-8') as f:
    for x in f:
        wishes_morning.append(x[:-2])

wishes_night = []
with open('text_files/wishes_night.txt', 'r', encoding='utf-8') as f:
    for x in f:
        wishes_night.append(x[:-2])

anecdots = []
with open('text_files/anecdots.txt', 'r', encoding='utf-8') as f:
    for x in f:
        anecdots.append(x)

food = []
with open('text_files/food.txt', 'r', encoding='utf-8') as f:
    for x in f:
        food.append(x)

emoji_morning = ['üíå', 'üíò', 'üíù', 'üíñ', 'üíó', 'üíì', 'üíû', 'üíï', '‚ù£', 'üß°', 'üíõ', 'üíö', 'üíô', 'üíú', 'ü§é', 'üñ§', 'ü§ç', 'ü´∂', 'üê±', 'üêá',
                 'üê∞', 'üêû']
emoji_night = ['üíå', 'üíò', 'üíù', 'üíñ', 'üíó', 'üíì', 'üíû', 'üíï', '‚ù£', 'üß°', 'üíõ', 'üíö', 'üíô', 'üíú', 'ü§é', '‚ô•', 'ü§ç', 'üåå', 'üê±', 'üåõ', 'üåÜ',
               'üí§', 'üêæ']
help_text = "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ú–∏–Ω–∏–≠–ª—å(„Å§‚úßœâ‚úß)„Å§\n" \
            "/help - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º\n" \
            "/compliment - –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞ –±–æ—Ç–æ–º\n" \
            "/acquaintance - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!\n" \
            "/meme - –æ—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–º–∞/–∞–Ω–µ–∫–¥–æ—Ç–∞ –±–æ—Ç–æ–º\n" \
            "/yummy - –Ω–∞ —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –Ω–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ —Å—ä–µ—Å—Ç—åüíô\n" \
            "p.s. —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –≤–∏–¥–∏—Ç –í–∞—à—É –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å –±–æ—Ç–æ–º, –¥–ª—è —Å–≤—è–∑–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –õ–° —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º"


def add_to_json(json_data):
    flag = 1
    data = json.load(open("users_data.json", encoding="utf-8"))
    if check_data(json_data):
        print("New user/update: " + json_data['username'])
        for i in range(len(data)):
            x = data[i]
            if x['chat_id'] == json_data['chat_id']:
                data[i]['name'] = json_data['name']
                data[i]['wake_up_time'] = datetime.datetime.strftime(
                    datetime.datetime.strptime(json_data['wake_up_time'], "%H:%M") - datetime.timedelta(hours=3),
                    "%H:%M")
                data[i]['sleep_time'] = datetime.datetime.strftime(
                    datetime.datetime.strptime(json_data['sleep_time'], "%H:%M") - datetime.timedelta(hours=3), "%H:%M")
                flag = 0
        if flag:
            json_data['wake_up_time'] = datetime.datetime.strftime(
                datetime.datetime.strptime(json_data['wake_up_time'], "%H:%M") - datetime.timedelta(hours=3), "%H:%M")
            json_data['sleep_time'] = datetime.datetime.strftime(
                datetime.datetime.strptime(json_data['sleep_time'], "%H:%M") - datetime.timedelta(hours=3), "%H:%M")
            data.append(json_data)
    with open("users_data.json", "w", encoding='utf-8') as file:
        json.dump(data, file, indent=2, ensure_ascii=False)


def wake_up_step(message, user_info):
    user_info['name'] = message.text
    msg = bot.send_message(message.chat.id,
                           '–í–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã –æ–±—ã—á–Ω–æ –≤—Å—Ç–∞–µ—à—å? –£–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ XX:XX –ø–æ –º—Å–∫, —á—Ç–æ–±—ã —è –º–æ–≥–ª–∞ –∑–∞–ø–æ–º–Ω–∏—Ç—å')
    bot.register_next_step_handler(msg, sleep_step, user_info)


def sleep_step(message, user_info):
    user_info['wake_up_time'] = message.text
    msg = bot.send_message(message.chat.id,
                           '–í–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã –æ–±—ã—á–Ω–æ –ª–æ–∂–∏—à—å—Å—è —Å–ø–∞—Ç—å? –£–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ XX:XX –ø–æ –º—Å–∫, —á—Ç–æ–±—ã —è –º–æ–≥–ª–∞ –∑–∞–ø–æ–º–Ω–∏—Ç—å')
    bot.register_next_step_handler(msg, fix_step, user_info)


def fix_step(message, user_info):
    user_info['sleep_time'] = message.text
    bot.send_message(message.chat.id,
                     '–£—Ä–∞! ' + user_info['name'] + ', —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã(*¬ØÔ∏∂¬Ø*)')
    user_info['username'] = bot.get_chat_member(user_info['chat_id'], user_info['chat_id']).user.username
    add_to_json(user_info)


def good_morning_message(chat_id):
    text = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ" + emoji_morning[random.randint(0, len(emoji_morning) - 1)] + '\n' + wishes_morning[
        random.randint(0, len(emoji_morning) - 1)] + \
           emoji_morning[random.randint(0, len(emoji_morning) - 1)]
    image_list = glob('good_morning_photos/*')
    pic = random.choice(image_list)
    bot.send_message(chat_id, text)
    bot.send_photo(chat_id, photo=open(pic, 'rb'))
    return 1


def good_night_message(chat_id):
    text = "–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏" + emoji_night[random.randint(0, len(emoji_morning) - 1)] + '\n' + wishes_night[
        random.randint(0, len(emoji_morning) - 1)] + \
           emoji_night[random.randint(0, len(emoji_morning) - 1)]
    image_list = glob('good_night_photos/*')
    pic = random.choice(image_list)
    bot.send_message(chat_id, text)
    bot.send_photo(chat_id, photo=open(pic, 'rb'))

    return 1

def yummy(chat_id):
    text = food[random.randint(0, len(food) - 1)][:-1]+"?"
    bot.send_message(chat_id, text)
    return 1

def meme_message(chat_id):
    image_list = glob('memes/*')
    pic = random.choice(image_list)
    bot.send_photo(chat_id, photo=open(pic, 'rb'))
    return 1

def love_message(chat_id):
    image_list = glob('love_message_photos/*')
    pic = random.choice(image_list)
    bot.send_photo(chat_id, photo=open(pic, 'rb'))
    return 1

def check_data(data):
    gm = data['wake_up_time']
    gn = data['sleep_time']
    pattern = pattern = r'^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$'
    if re.fullmatch(pattern, gm) and re.fullmatch(pattern, gn):
        return 1
    return 0


def acquaintance(chat_id):
    user_info = {}
    user_info['chat_id'] = chat_id
    msg = bot.send_message(chat_id, '–ö–∞–∫ —è –º–æ–≥—É –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?(* ^ œâ ^)')
    bot.register_next_step_handler(msg, wake_up_step, user_info)


def job():
    time = datetime.datetime.now()
    current_time = time.strftime("%H:%M")
    data = json.load(open("users_data.json"))
    for x in data:
        if current_time == x['wake_up_time']:
            good_morning_message(x['chat_id'])
        if current_time == x['sleep_time']:
            good_night_message(x['chat_id'])


@bot.message_handler(commands=['start', 'help', 'compliment', 'acquaintance', 'meme', 'yummy'])
def get_command_messages(message):
    if message.text == "/start":
        bot.send_message(message.chat.id,
                         f"–ù–∏—Ö–∞–æ, {message.from_user.first_name}, —Ä–∞–¥–∞ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è\(‚òÖœâ‚òÖ)/" + '\n' + "–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /help")
    elif message.text == "/help":
        bot.send_message(message.from_user.id, help_text)
    elif message.text == '/compliment':
        x = random.randint(0, 10000)
        if x % 2 == 0:
            bot.send_message(message.from_user.id, compliments[random.randint(0, len(compliments) - 1)])
        else:
            love_message(message.from_user.id)
    elif message.text == '/acquaintance':
        acquaintance(message.from_user.id)
    elif message.text == '/meme':
        x = random.randint(0, 100)
        if x % 2 == 0:
            bot.send_message(message.from_user.id, anecdots[random.randint(0, len(anecdots) - 1)])
        else:
            meme_message(message.from_user.id)
    elif message.text == '/yummy':
        yummy(message.from_user.id)
    else:
        bot.send_message(message.from_user.id,
                         "–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É|ÔΩ•œâÔΩ•)")


@bot.message_handler(content_types=['text'])
def get_text_message(message):
    if message.text.lower() == '–ø—Ä–∏–≤–µ—Ç':
        bot.send_message(message.chat.id,
                         '–ø—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–æ—Ç–æ–º, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /help')
    elif '–≥—Ä—É—Å—Ç–Ω–æ' in message.text.lower():
        bot.send_message(message.chat.id,
                         "–Ω–∞–º –≤—Å–µ–º –ø–æ—Ä–æ–π –±—ã–≤–∞–µ—Ç –≥—Ä—É—Å—Ç–Ω–æ, —É —Ç–µ–±—è –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è!")
    elif '—Å–∫—É—á–∞—é' in message.text.lower():
        bot.send_message(message.chat.id,
                         "–≤—Å–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç. –ø—Ä–æ–π–¥–µ—Ç –∏ —ç—Ç–æ")
    elif "—Å–ø–∞—Å–∏–±–æ" in message.text.lower():
        bot.send_message(message.chat.id,
                         "–≤—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! —Ö–æ—Ä–æ—à–µ–≥–æ —Ç–µ–±–µ –¥–Ω—è)")
    else:
        bot.send_message(message.chat.id,
                         "–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É|ÔΩ•œâÔΩ•)")


def schedule_checker():
    while True:
        schedule.run_pending()
        time.sleep(1)


proc_bot = threading.Thread(target=bot.infinity_polling)
proc_bot.start()

scheduler = BlockingScheduler()
scheduler.add_job(job, 'interval', minutes=1)
scheduler.start()
